# This file was generated by SableCC (http://www.sablecc.org/).


class Analysis(object):
    def __init__(self):
        self._in_ = None
        self._out_ = None

    def getIn(self, node):
        if self._in_ is None:
            return None

        if self._in_ in node:
            return self._in_[node]
        else:
            return None

    def setIn(self, node, _in_):
        if self._in_ is None:
            self._in_ = dict()

        if _in_ is not None:
            self._in_[node] = _in_
        else:
            if self._in_ in node:
                del self._in_[node]

    def getOut(self, node):
        if self._out_ is None:
            return None

        if self._out_ in node:
            return self._out_[node]
        else:
            return None

    def setOut(self, node, _out_):
        if self._out_ is None:
            self._out_ = dict()

        if _out_ is not None:
            self._out_[node] = _out_
        else:
            if self._out_ in node:
                del self._out_[node]

    def caseStart(self, node):
        self.defaultCase(node)

    def caseALogicstatementStatement(self, node):
        self.defaultCase(node)

    def caseAScoreStatement(self, node):
        self.defaultCase(node)

    def caseABooleancondition(self, node):
        self.defaultCase(node)

    def caseAStatementCondition(self, node):
        self.defaultCase(node)

    def caseAResidueCondition(self, node):
        self.defaultCase(node)

    def caseAExcludeCondition(self, node):
        self.defaultCase(node)

    def caseASelectCondition(self, node):
        self.defaultCase(node)

    def caseACondition2(self, node):
        self.defaultCase(node)

    def caseAAndLogicsymbol(self, node):
        self.defaultCase(node)

    def caseAOrLogicsymbol(self, node):
        self.defaultCase(node)

    def caseAResidueResidue(self, node):
        self.defaultCase(node)

    def caseAResiduenotResidue(self, node):
        self.defaultCase(node)

    def caseAResidueinvertResidue(self, node):
        self.defaultCase(node)

    def caseAExcludestatement(self, node):
        self.defaultCase(node)

    def caseASelectstatement(self, node):
        self.defaultCase(node)

    def caseAExactlySelectstatement2(self, node):
        self.defaultCase(node)

    def caseAAtleastSelectstatement2(self, node):
        self.defaultCase(node)

    def caseANotmorethanSelectstatement2(self, node):
        self.defaultCase(node)

    def caseAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultCase(node)

    def caseASelectlist(self, node):
        self.defaultCase(node)

    def caseAListitems(self, node):
        self.defaultCase(node)

    def caseAScorecondition(self, node):
        self.defaultCase(node)

    def caseAScorelist(self, node):
        self.defaultCase(node)

    def caseAStatementScoreitem(self, node):
        self.defaultCase(node)

    def caseAMaxScoreitem(self, node):
        self.defaultCase(node)

    def caseAScoreitems(self, node):
        self.defaultCase(node)

    def caseAIntegerNumber(self, node):
        self.defaultCase(node)

    def caseAFloatNumber(self, node):
        self.defaultCase(node)

    def caseTMin(self, node):
        self.defaultCase(node)

    def caseTAnd(self, node):
        self.defaultCase(node)

    def caseTOr(self, node):
        self.defaultCase(node)

    def caseTNot(self, node):
        self.defaultCase(node)

    def caseTExclude(self, node):
        self.defaultCase(node)

    def caseTSelect(self, node):
        self.defaultCase(node)

    def caseTFrom(self, node):
        self.defaultCase(node)

    def caseTAtleast(self, node):
        self.defaultCase(node)

    def caseTExactly(self, node):
        self.defaultCase(node)

    def caseTNotmorethan(self, node):
        self.defaultCase(node)

    def caseTScore(self, node):
        self.defaultCase(node)

    def caseTMax(self, node):
        self.defaultCase(node)

    def caseTLPar(self, node):
        self.defaultCase(node)

    def caseTRPar(self, node):
        self.defaultCase(node)

    def caseTMapper(self, node):
        self.defaultCase(node)

    def caseTComma(self, node):
        self.defaultCase(node)

    def caseTBlank(self, node):
        self.defaultCase(node)

    def caseTInteger(self, node):
        self.defaultCase(node)

    def caseTFloat(self, node):
        self.defaultCase(node)

    def caseTAminoAcid(self, node):
        self.defaultCase(node)

    def caseEOF(self, node):
        self.defaultCase(node)

    def defaultCase(self, node):
        pass


class DepthFirstAdapter(Analysis):
    def inStart(self, node):
        self.defaultIn(node)

    def outStart(self, node):
        self.defaultOut(node)

    def defaultIn(self, node):
        pass

    def defaultOut(self, node):
        pass

    def caseStart(self, node):
        self.inStart(node)
        node.getPStatement().apply(self)
        node.getEOF().apply(self)
        self.outStart(node)

    def inALogicstatementStatement(self, node):
        self.defaultIn(node)

    def outALogicstatementStatement(self, node):
        self.defaultOut(node)

    def caseALogicstatementStatement(self, node):
        self.inALogicstatementStatement(node)
        if node.getBooleancondition() is not None:
            node.getBooleancondition().apply(self)
        self.outALogicstatementStatement(node)

    def inAScoreStatement(self, node):
        self.defaultIn(node)

    def outAScoreStatement(self, node):
        self.defaultOut(node)

    def caseAScoreStatement(self, node):
        self.inAScoreStatement(node)
        if node.getScorecondition() is not None:
            node.getScorecondition().apply(self)
        self.outAScoreStatement(node)

    def inABooleancondition(self, node):
        self.defaultIn(node)

    def outABooleancondition(self, node):
        self.defaultOut(node)

    def caseABooleancondition(self, node):
        self.inABooleancondition(node)
        if node.getCondition() is not None:
            node.getCondition().apply(self)
        temp = node.getCondition2()
        for item in temp:
            item.apply(self)
        self.outABooleancondition(node)

    def inAStatementCondition(self, node):
        self.defaultIn(node)

    def outAStatementCondition(self, node):
        self.defaultOut(node)

    def caseAStatementCondition(self, node):
        self.inAStatementCondition(node)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getBooleancondition() is not None:
            node.getBooleancondition().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAStatementCondition(node)

    def inAResidueCondition(self, node):
        self.defaultIn(node)

    def outAResidueCondition(self, node):
        self.defaultOut(node)

    def caseAResidueCondition(self, node):
        self.inAResidueCondition(node)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        self.outAResidueCondition(node)

    def inAExcludeCondition(self, node):
        self.defaultIn(node)

    def outAExcludeCondition(self, node):
        self.defaultOut(node)

    def caseAExcludeCondition(self, node):
        self.inAExcludeCondition(node)
        if node.getExcludestatement() is not None:
            node.getExcludestatement().apply(self)
        self.outAExcludeCondition(node)

    def inASelectCondition(self, node):
        self.defaultIn(node)

    def outASelectCondition(self, node):
        self.defaultOut(node)

    def caseASelectCondition(self, node):
        self.inASelectCondition(node)
        if node.getSelectstatement() is not None:
            node.getSelectstatement().apply(self)
        self.outASelectCondition(node)

    def inACondition2(self, node):
        self.defaultIn(node)

    def outACondition2(self, node):
        self.defaultOut(node)

    def caseACondition2(self, node):
        self.inACondition2(node)
        if node.getLogicsymbol() is not None:
            node.getLogicsymbol().apply(self)
        if node.getCondition() is not None:
            node.getCondition().apply(self)
        self.outACondition2(node)

    def inAAndLogicsymbol(self, node):
        self.defaultIn(node)

    def outAAndLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAAndLogicsymbol(self, node):
        self.inAAndLogicsymbol(node)
        if node.getAnd() is not None:
            node.getAnd().apply(self)
        self.outAAndLogicsymbol(node)

    def inAOrLogicsymbol(self, node):
        self.defaultIn(node)

    def outAOrLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAOrLogicsymbol(self, node):
        self.inAOrLogicsymbol(node)
        if node.getOr() is not None:
            node.getOr().apply(self)
        self.outAOrLogicsymbol(node)

    def inAResidueResidue(self, node):
        self.defaultIn(node)

    def outAResidueResidue(self, node):
        self.defaultOut(node)

    def caseAResidueResidue(self, node):
        self.inAResidueResidue(node)
        if node.getOriginalaminoacid() is not None:
            node.getOriginalaminoacid().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        temp = node.getMutatedaminoacid()
        for item in temp:
            item.apply(self)
        self.outAResidueResidue(node)

    def inAResiduenotResidue(self, node):
        self.defaultIn(node)

    def outAResiduenotResidue(self, node):
        self.defaultOut(node)

    def caseAResiduenotResidue(self, node):
        self.inAResiduenotResidue(node)
        if node.getNot() is not None:
            node.getNot().apply(self)
        if node.getOriginalaminoacid() is not None:
            node.getOriginalaminoacid().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        temp = node.getMutatedaminoacid()
        for item in temp:
            item.apply(self)
        self.outAResiduenotResidue(node)

    def inAResidueinvertResidue(self, node):
        self.defaultIn(node)

    def outAResidueinvertResidue(self, node):
        self.defaultOut(node)

    def caseAResidueinvertResidue(self, node):
        self.inAResidueinvertResidue(node)
        if node.getOriginalaminoacid() is not None:
            node.getOriginalaminoacid().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getNot() is not None:
            node.getNot().apply(self)
        temp = node.getMutatedaminoacid()
        for item in temp:
            item.apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAResidueinvertResidue(node)

    def inAExcludestatement(self, node):
        self.defaultIn(node)

    def outAExcludestatement(self, node):
        self.defaultOut(node)

    def caseAExcludestatement(self, node):
        self.inAExcludestatement(node)
        if node.getExclude() is not None:
            node.getExclude().apply(self)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        self.outAExcludestatement(node)

    def inASelectstatement(self, node):
        self.defaultIn(node)

    def outASelectstatement(self, node):
        self.defaultOut(node)

    def caseASelectstatement(self, node):
        self.inASelectstatement(node)
        if node.getSelect() is not None:
            node.getSelect().apply(self)
        if node.getSelectstatement2() is not None:
            node.getSelectstatement2().apply(self)
        self.outASelectstatement(node)

    def inAExactlySelectstatement2(self, node):
        self.defaultIn(node)

    def outAExactlySelectstatement2(self, node):
        self.defaultOut(node)

    def caseAExactlySelectstatement2(self, node):
        self.inAExactlySelectstatement2(node)
        if node.getExactly() is not None:
            node.getExactly().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAExactlySelectstatement2(node)

    def inAAtleastSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastSelectstatement2(self, node):
        self.inAAtleastSelectstatement2(node)
        if node.getAtleast() is not None:
            node.getAtleast().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAAtleastSelectstatement2(node)

    def inANotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outANotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseANotmorethanSelectstatement2(self, node):
        self.inANotmorethanSelectstatement2(node)
        if node.getNotmorethan() is not None:
            node.getNotmorethan().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outANotmorethanSelectstatement2(node)

    def inAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastnotmorethanSelectstatement2(self, node):
        self.inAAtleastnotmorethanSelectstatement2(node)
        if node.getAtleast() is not None:
            node.getAtleast().apply(self)
        if node.getAtleastnumber() is not None:
            node.getAtleastnumber().apply(self)
        if node.getLogicsymbol() is not None:
            node.getLogicsymbol().apply(self)
        if node.getNotmorethan() is not None:
            node.getNotmorethan().apply(self)
        if node.getNotmorethannumber() is not None:
            node.getNotmorethannumber().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAAtleastnotmorethanSelectstatement2(node)

    def inASelectlist(self, node):
        self.defaultIn(node)

    def outASelectlist(self, node):
        self.defaultOut(node)

    def caseASelectlist(self, node):
        self.inASelectlist(node)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        temp = node.getListitems()
        for item in temp:
            item.apply(self)
        self.outASelectlist(node)

    def inAListitems(self, node):
        self.defaultIn(node)

    def outAListitems(self, node):
        self.defaultOut(node)

    def caseAListitems(self, node):
        self.inAListitems(node)
        if node.getComma() is not None:
            node.getComma().apply(self)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        self.outAListitems(node)

    def inAScorecondition(self, node):
        self.defaultIn(node)

    def outAScorecondition(self, node):
        self.defaultOut(node)

    def caseAScorecondition(self, node):
        self.inAScorecondition(node)
        if node.getScore() is not None:
            node.getScore().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getScorelist() is not None:
            node.getScorelist().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAScorecondition(node)

    def inAScorelist(self, node):
        self.defaultIn(node)

    def outAScorelist(self, node):
        self.defaultOut(node)

    def caseAScorelist(self, node):
        self.inAScorelist(node)
        if node.getScoreitem() is not None:
            node.getScoreitem().apply(self)
        temp = node.getScoreitems()
        for item in temp:
            item.apply(self)
        self.outAScorelist(node)

    def inAStatementScoreitem(self, node):
        self.defaultIn(node)

    def outAStatementScoreitem(self, node):
        self.defaultOut(node)

    def caseAStatementScoreitem(self, node):
        self.inAStatementScoreitem(node)
        if node.getBooleancondition() is not None:
            node.getBooleancondition().apply(self)
        if node.getMapper() is not None:
            node.getMapper().apply(self)
        if node.getMin() is not None:
            node.getMin().apply(self)
        if node.getNumber() is not None:
            node.getNumber().apply(self)
        self.outAStatementScoreitem(node)

    def inAMaxScoreitem(self, node):
        self.defaultIn(node)

    def outAMaxScoreitem(self, node):
        self.defaultOut(node)

    def caseAMaxScoreitem(self, node):
        self.inAMaxScoreitem(node)
        if node.getMax() is not None:
            node.getMax().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getScorelist() is not None:
            node.getScorelist().apply(self)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        self.outAMaxScoreitem(node)

    def inAScoreitems(self, node):
        self.defaultIn(node)

    def outAScoreitems(self, node):
        self.defaultOut(node)

    def caseAScoreitems(self, node):
        self.inAScoreitems(node)
        if node.getComma() is not None:
            node.getComma().apply(self)
        if node.getScoreitem() is not None:
            node.getScoreitem().apply(self)
        self.outAScoreitems(node)

    def inAIntegerNumber(self, node):
        self.defaultIn(node)

    def outAIntegerNumber(self, node):
        self.defaultOut(node)

    def caseAIntegerNumber(self, node):
        self.inAIntegerNumber(node)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        self.outAIntegerNumber(node)

    def inAFloatNumber(self, node):
        self.defaultIn(node)

    def outAFloatNumber(self, node):
        self.defaultOut(node)

    def caseAFloatNumber(self, node):
        self.inAFloatNumber(node)
        if node.getFloat() is not None:
            node.getFloat().apply(self)
        self.outAFloatNumber(node)


class ReversedDepthFirstAdapter(Analysis):
    def inStart(self, node):
        self.defaultIn(node)

    def outStart(self, node):
        self.defaultOut(node)

    def defaultIn(self, node):
        pass

    def defaultOut(self, node):
        pass

    def caseStart(self, node):
        self.inStart(node)
        node.getEOF().apply(self)
        node.getPStatement().apply(self)
        self.outStart(node)

    def inALogicstatementStatement(self, node):
        self.defaultIn(node)

    def outALogicstatementStatement(self, node):
        self.defaultOut(node)

    def caseALogicstatementStatement(self, node):
        self.inALogicstatementStatement(node)
        if node.getBooleancondition() is not None:
            node.getBooleancondition().apply(self)
        self.outALogicstatementStatement(node)

    def inAScoreStatement(self, node):
        self.defaultIn(node)

    def outAScoreStatement(self, node):
        self.defaultOut(node)

    def caseAScoreStatement(self, node):
        self.inAScoreStatement(node)
        if node.getScorecondition() is not None:
            node.getScorecondition().apply(self)
        self.outAScoreStatement(node)

    def inABooleancondition(self, node):
        self.defaultIn(node)

    def outABooleancondition(self, node):
        self.defaultOut(node)

    def caseABooleancondition(self, node):
        self.inABooleancondition(node)
        temp = node.getCondition2()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if node.getCondition() is not None:
            node.getCondition().apply(self)
        self.outABooleancondition(node)

    def inAStatementCondition(self, node):
        self.defaultIn(node)

    def outAStatementCondition(self, node):
        self.defaultOut(node)

    def caseAStatementCondition(self, node):
        self.inAStatementCondition(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getBooleancondition() is not None:
            node.getBooleancondition().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        self.outAStatementCondition(node)

    def inAResidueCondition(self, node):
        self.defaultIn(node)

    def outAResidueCondition(self, node):
        self.defaultOut(node)

    def caseAResidueCondition(self, node):
        self.inAResidueCondition(node)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        self.outAResidueCondition(node)

    def inAExcludeCondition(self, node):
        self.defaultIn(node)

    def outAExcludeCondition(self, node):
        self.defaultOut(node)

    def caseAExcludeCondition(self, node):
        self.inAExcludeCondition(node)
        if node.getExcludestatement() is not None:
            node.getExcludestatement().apply(self)
        self.outAExcludeCondition(node)

    def inASelectCondition(self, node):
        self.defaultIn(node)

    def outASelectCondition(self, node):
        self.defaultOut(node)

    def caseASelectCondition(self, node):
        self.inASelectCondition(node)
        if node.getSelectstatement() is not None:
            node.getSelectstatement().apply(self)
        self.outASelectCondition(node)

    def inACondition2(self, node):
        self.defaultIn(node)

    def outACondition2(self, node):
        self.defaultOut(node)

    def caseACondition2(self, node):
        self.inACondition2(node)
        if node.getCondition() is not None:
            node.getCondition().apply(self)
        if node.getLogicsymbol() is not None:
            node.getLogicsymbol().apply(self)
        self.outACondition2(node)

    def inAAndLogicsymbol(self, node):
        self.defaultIn(node)

    def outAAndLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAAndLogicsymbol(self, node):
        self.inAAndLogicsymbol(node)
        if node.getAnd() is not None:
            node.getAnd().apply(self)
        self.outAAndLogicsymbol(node)

    def inAOrLogicsymbol(self, node):
        self.defaultIn(node)

    def outAOrLogicsymbol(self, node):
        self.defaultOut(node)

    def caseAOrLogicsymbol(self, node):
        self.inAOrLogicsymbol(node)
        if node.getOr() is not None:
            node.getOr().apply(self)
        self.outAOrLogicsymbol(node)

    def inAResidueResidue(self, node):
        self.defaultIn(node)

    def outAResidueResidue(self, node):
        self.defaultOut(node)

    def caseAResidueResidue(self, node):
        self.inAResidueResidue(node)
        temp = node.getMutatedaminoacid()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getOriginalaminoacid() is not None:
            node.getOriginalaminoacid().apply(self)
        self.outAResidueResidue(node)

    def inAResiduenotResidue(self, node):
        self.defaultIn(node)

    def outAResiduenotResidue(self, node):
        self.defaultOut(node)

    def caseAResiduenotResidue(self, node):
        self.inAResiduenotResidue(node)
        temp = node.getMutatedaminoacid()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getOriginalaminoacid() is not None:
            node.getOriginalaminoacid().apply(self)
        if node.getNot() is not None:
            node.getNot().apply(self)
        self.outAResiduenotResidue(node)

    def inAResidueinvertResidue(self, node):
        self.defaultIn(node)

    def outAResidueinvertResidue(self, node):
        self.defaultOut(node)

    def caseAResidueinvertResidue(self, node):
        self.inAResidueinvertResidue(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        temp = node.getMutatedaminoacid()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if node.getNot() is not None:
            node.getNot().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getOriginalaminoacid() is not None:
            node.getOriginalaminoacid().apply(self)
        self.outAResidueinvertResidue(node)

    def inAExcludestatement(self, node):
        self.defaultIn(node)

    def outAExcludestatement(self, node):
        self.defaultOut(node)

    def caseAExcludestatement(self, node):
        self.inAExcludestatement(node)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        if node.getExclude() is not None:
            node.getExclude().apply(self)
        self.outAExcludestatement(node)

    def inASelectstatement(self, node):
        self.defaultIn(node)

    def outASelectstatement(self, node):
        self.defaultOut(node)

    def caseASelectstatement(self, node):
        self.inASelectstatement(node)
        if node.getSelectstatement2() is not None:
            node.getSelectstatement2().apply(self)
        if node.getSelect() is not None:
            node.getSelect().apply(self)
        self.outASelectstatement(node)

    def inAExactlySelectstatement2(self, node):
        self.defaultIn(node)

    def outAExactlySelectstatement2(self, node):
        self.defaultOut(node)

    def caseAExactlySelectstatement2(self, node):
        self.inAExactlySelectstatement2(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getExactly() is not None:
            node.getExactly().apply(self)
        self.outAExactlySelectstatement2(node)

    def inAAtleastSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastSelectstatement2(self, node):
        self.inAAtleastSelectstatement2(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getAtleast() is not None:
            node.getAtleast().apply(self)
        self.outAAtleastSelectstatement2(node)

    def inANotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outANotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseANotmorethanSelectstatement2(self, node):
        self.inANotmorethanSelectstatement2(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        if node.getNotmorethan() is not None:
            node.getNotmorethan().apply(self)
        self.outANotmorethanSelectstatement2(node)

    def inAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultIn(node)

    def outAAtleastnotmorethanSelectstatement2(self, node):
        self.defaultOut(node)

    def caseAAtleastnotmorethanSelectstatement2(self, node):
        self.inAAtleastnotmorethanSelectstatement2(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getSelectlist() is not None:
            node.getSelectlist().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getNotmorethannumber() is not None:
            node.getNotmorethannumber().apply(self)
        if node.getNotmorethan() is not None:
            node.getNotmorethan().apply(self)
        if node.getLogicsymbol() is not None:
            node.getLogicsymbol().apply(self)
        if node.getAtleastnumber() is not None:
            node.getAtleastnumber().apply(self)
        if node.getAtleast() is not None:
            node.getAtleast().apply(self)
        self.outAAtleastnotmorethanSelectstatement2(node)

    def inASelectlist(self, node):
        self.defaultIn(node)

    def outASelectlist(self, node):
        self.defaultOut(node)

    def caseASelectlist(self, node):
        self.inASelectlist(node)
        temp = node.getListitems()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        self.outASelectlist(node)

    def inAListitems(self, node):
        self.defaultIn(node)

    def outAListitems(self, node):
        self.defaultOut(node)

    def caseAListitems(self, node):
        self.inAListitems(node)
        if node.getResidue() is not None:
            node.getResidue().apply(self)
        if node.getComma() is not None:
            node.getComma().apply(self)
        self.outAListitems(node)

    def inAScorecondition(self, node):
        self.defaultIn(node)

    def outAScorecondition(self, node):
        self.defaultOut(node)

    def caseAScorecondition(self, node):
        self.inAScorecondition(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getScorelist() is not None:
            node.getScorelist().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getFrom() is not None:
            node.getFrom().apply(self)
        if node.getScore() is not None:
            node.getScore().apply(self)
        self.outAScorecondition(node)

    def inAScorelist(self, node):
        self.defaultIn(node)

    def outAScorelist(self, node):
        self.defaultOut(node)

    def caseAScorelist(self, node):
        self.inAScorelist(node)
        temp = node.getScoreitems()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if node.getScoreitem() is not None:
            node.getScoreitem().apply(self)
        self.outAScorelist(node)

    def inAStatementScoreitem(self, node):
        self.defaultIn(node)

    def outAStatementScoreitem(self, node):
        self.defaultOut(node)

    def caseAStatementScoreitem(self, node):
        self.inAStatementScoreitem(node)
        if node.getNumber() is not None:
            node.getNumber().apply(self)
        if node.getMin() is not None:
            node.getMin().apply(self)
        if node.getMapper() is not None:
            node.getMapper().apply(self)
        if node.getBooleancondition() is not None:
            node.getBooleancondition().apply(self)
        self.outAStatementScoreitem(node)

    def inAMaxScoreitem(self, node):
        self.defaultIn(node)

    def outAMaxScoreitem(self, node):
        self.defaultOut(node)

    def caseAMaxScoreitem(self, node):
        self.inAMaxScoreitem(node)
        if node.getRPar() is not None:
            node.getRPar().apply(self)
        if node.getScorelist() is not None:
            node.getScorelist().apply(self)
        if node.getLPar() is not None:
            node.getLPar().apply(self)
        if node.getMax() is not None:
            node.getMax().apply(self)
        self.outAMaxScoreitem(node)

    def inAScoreitems(self, node):
        self.defaultIn(node)

    def outAScoreitems(self, node):
        self.defaultOut(node)

    def caseAScoreitems(self, node):
        self.inAScoreitems(node)
        if node.getScoreitem() is not None:
            node.getScoreitem().apply(self)
        if node.getComma() is not None:
            node.getComma().apply(self)
        self.outAScoreitems(node)

    def inAIntegerNumber(self, node):
        self.defaultIn(node)

    def outAIntegerNumber(self, node):
        self.defaultOut(node)

    def caseAIntegerNumber(self, node):
        self.inAIntegerNumber(node)
        if node.getInteger() is not None:
            node.getInteger().apply(self)
        self.outAIntegerNumber(node)

    def inAFloatNumber(self, node):
        self.defaultIn(node)

    def outAFloatNumber(self, node):
        self.defaultOut(node)

    def caseAFloatNumber(self, node):
        self.inAFloatNumber(node)
        if node.getFloat() is not None:
            node.getFloat().apply(self)
        self.outAFloatNumber(node)
