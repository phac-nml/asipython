# This file was generated by SableCC (http://www.sablecc.org/).

from Asi.grammar.node import *
from Asi.grammar.utils import Stack, StringBuffer

class ParserException(Exception):
    def __init__(self, token, value):
        self.value = value
        self.token = token

    def getToken(self):
        return self.token

    def __str__(self):
        return self.value
        
class State(object):
    def __init__(self, state, nodes):
        self.state = state
        self.nodes = nodes

# parser actions
ACTION_SHIFT = 0
ACTION_REDUCE = 1
ACTION_ACCEPT = 2
ACTION_ERROR = 3
        
def new0(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pbooleanconditionNode2 = nodeArrayList1[0]
    pstatementNode1 = ALogicstatementStatement(pbooleanconditionNode2)
    nodeList.append(pstatementNode1)
    return nodeList, 0

def new1(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pscoreconditionNode2 = nodeArrayList1[0]
    pstatementNode1 = AScoreStatement(pscoreconditionNode2)
    nodeList.append(pstatementNode1)
    return nodeList, 0

def new2(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pconditionNode2 = nodeArrayList1[0]
    pbooleanconditionNode1 = ABooleancondition(pconditionNode2,listNode3)
    nodeList.append(pbooleanconditionNode1)
    return nodeList, 1

def new3(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pconditionNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    pbooleanconditionNode1 = ABooleancondition(pconditionNode2,listNode4)
    nodeList.append(pbooleanconditionNode1)
    return nodeList, 1

def new4(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlparNode2 = nodeArrayList1[0]
    pbooleanconditionNode3 = nodeArrayList2[0]
    trparNode4 = nodeArrayList3[0]
    pconditionNode1 = AStatementCondition(tlparNode2,pbooleanconditionNode3,trparNode4)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new5(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    presidueNode2 = nodeArrayList1[0]
    pconditionNode1 = AResidueCondition(presidueNode2)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new6(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pexcludestatementNode2 = nodeArrayList1[0]
    pconditionNode1 = AExcludeCondition(pexcludestatementNode2)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new7(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pselectstatementNode2 = nodeArrayList1[0]
    pconditionNode1 = ASelectCondition(pselectstatementNode2)
    nodeList.append(pconditionNode1)
    return nodeList, 2

def new8(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    plogicsymbolNode2 = nodeArrayList1[0]
    pconditionNode3 = nodeArrayList2[0]
    pcondition2Node1 = ACondition2(plogicsymbolNode2,pconditionNode3)
    nodeList.append(pcondition2Node1)
    return nodeList, 3

def new9(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tandNode2 = nodeArrayList1[0]
    plogicsymbolNode1 = AAndLogicsymbol(tandNode2)
    nodeList.append(plogicsymbolNode1)
    return nodeList, 4

def new10(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    torNode2 = nodeArrayList1[0]
    plogicsymbolNode1 = AOrLogicsymbol(torNode2)
    nodeList.append(plogicsymbolNode1)
    return nodeList, 4

def new11(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    tintegerNode3 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    presidueNode1 = AResidueResidue(None,tintegerNode3,listNode5)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new12(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    taminoacidNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    presidueNode1 = AResidueResidue(taminoacidNode2,tintegerNode3,listNode5)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new13(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    tnotNode2 = nodeArrayList1[0]
    tintegerNode4 = nodeArrayList2[0]
    listNode5 = nodeArrayList3[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    presidueNode1 = AResiduenotResidue(tnotNode2,None,tintegerNode4,listNode6)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new14(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    tnotNode2 = nodeArrayList1[0]
    taminoacidNode3 = nodeArrayList2[0]
    tintegerNode4 = nodeArrayList3[0]
    listNode5 = nodeArrayList4[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    presidueNode1 = AResiduenotResidue(tnotNode2,taminoacidNode3,tintegerNode4,listNode6)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new15(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    tintegerNode3 = nodeArrayList1[0]
    tlparNode4 = nodeArrayList2[0]
    tnotNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    trparNode8 = nodeArrayList5[0]
    presidueNode1 = AResidueinvertResidue(None,tintegerNode3,tlparNode4,tnotNode5,listNode7,trparNode8)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new16(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    taminoacidNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tlparNode4 = nodeArrayList3[0]
    tnotNode5 = nodeArrayList4[0]
    listNode6 = nodeArrayList5[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    trparNode8 = nodeArrayList6[0]
    presidueNode1 = AResidueinvertResidue(taminoacidNode2,tintegerNode3,tlparNode4,tnotNode5,listNode7,trparNode8)
    nodeList.append(presidueNode1)
    return nodeList, 5

def new17(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    texcludeNode2 = nodeArrayList1[0]
    presidueNode3 = nodeArrayList2[0]
    pexcludestatementNode1 = AExcludestatement(texcludeNode2,presidueNode3)
    nodeList.append(pexcludestatementNode1)
    return nodeList, 6

def new18(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tselectNode2 = nodeArrayList1[0]
    pselectstatement2Node3 = nodeArrayList2[0]
    pselectstatementNode1 = ASelectstatement(tselectNode2,pselectstatement2Node3)
    nodeList.append(pselectstatementNode1)
    return nodeList, 7

def new19(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    texactlyNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tfromNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pselectlistNode6 = nodeArrayList5[0]
    trparNode7 = nodeArrayList6[0]
    pselectstatement2Node1 = AExactlySelectstatement2(texactlyNode2,tintegerNode3,tfromNode4,tlparNode5,pselectlistNode6,trparNode7)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new20(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tatleastNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tfromNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pselectlistNode6 = nodeArrayList5[0]
    trparNode7 = nodeArrayList6[0]
    pselectstatement2Node1 = AAtleastSelectstatement2(tatleastNode2,tintegerNode3,tfromNode4,tlparNode5,pselectlistNode6,trparNode7)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new21(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tnotmorethanNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    tfromNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pselectlistNode6 = nodeArrayList5[0]
    trparNode7 = nodeArrayList6[0]
    pselectstatement2Node1 = ANotmorethanSelectstatement2(tnotmorethanNode2,tintegerNode3,tfromNode4,tlparNode5,pselectlistNode6,trparNode7)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new22(self):
    nodeList = list()
    nodeArrayList9 = self.pop()
    nodeArrayList8 = self.pop()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tatleastNode2 = nodeArrayList1[0]
    tintegerNode3 = nodeArrayList2[0]
    plogicsymbolNode4 = nodeArrayList3[0]
    tnotmorethanNode5 = nodeArrayList4[0]
    tintegerNode6 = nodeArrayList5[0]
    tfromNode7 = nodeArrayList6[0]
    tlparNode8 = nodeArrayList7[0]
    pselectlistNode9 = nodeArrayList8[0]
    trparNode10 = nodeArrayList9[0]
    pselectstatement2Node1 = AAtleastnotmorethanSelectstatement2(tatleastNode2,tintegerNode3,plogicsymbolNode4,tnotmorethanNode5,tintegerNode6,tfromNode7,tlparNode8,pselectlistNode9,trparNode10)
    nodeList.append(pselectstatement2Node1)
    return nodeList, 8

def new23(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    presidueNode2 = nodeArrayList1[0]
    pselectlistNode1 = ASelectlist(presidueNode2,listNode3)
    nodeList.append(pselectlistNode1)
    return nodeList, 9

def new24(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    presidueNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    pselectlistNode1 = ASelectlist(presidueNode2,listNode4)
    nodeList.append(pselectlistNode1)
    return nodeList, 9

def new25(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    presidueNode3 = nodeArrayList2[0]
    plistitemsNode1 = AListitems(tcommaNode2,presidueNode3)
    nodeList.append(plistitemsNode1)
    return nodeList, 10

def new26(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tscoreNode2 = nodeArrayList1[0]
    tfromNode3 = nodeArrayList2[0]
    tlparNode4 = nodeArrayList3[0]
    pscorelistNode5 = nodeArrayList4[0]
    trparNode6 = nodeArrayList5[0]
    pscoreconditionNode1 = AScorecondition(tscoreNode2,tfromNode3,tlparNode4,pscorelistNode5,trparNode6)
    nodeList.append(pscoreconditionNode1)
    return nodeList, 11

def new27(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pscoreitemNode2 = nodeArrayList1[0]
    pscorelistNode1 = AScorelist(pscoreitemNode2,listNode3)
    nodeList.append(pscorelistNode1)
    return nodeList, 12

def new28(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pscoreitemNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    pscorelistNode1 = AScorelist(pscoreitemNode2,listNode4)
    nodeList.append(pscorelistNode1)
    return nodeList, 12

def new29(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pbooleanconditionNode2 = nodeArrayList1[0]
    tmapperNode3 = nodeArrayList2[0]
    pnumberNode5 = nodeArrayList3[0]
    pscoreitemNode1 = AStatementScoreitem(pbooleanconditionNode2,tmapperNode3,None,pnumberNode5)
    nodeList.append(pscoreitemNode1)
    return nodeList, 13

def new30(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pbooleanconditionNode2 = nodeArrayList1[0]
    tmapperNode3 = nodeArrayList2[0]
    tminNode4 = nodeArrayList3[0]
    pnumberNode5 = nodeArrayList4[0]
    pscoreitemNode1 = AStatementScoreitem(pbooleanconditionNode2,tmapperNode3,tminNode4,pnumberNode5)
    nodeList.append(pscoreitemNode1)
    return nodeList, 13

def new31(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tmaxNode2 = nodeArrayList1[0]
    tlparNode3 = nodeArrayList2[0]
    pscorelistNode4 = nodeArrayList3[0]
    trparNode5 = nodeArrayList4[0]
    pscoreitemNode1 = AMaxScoreitem(tmaxNode2,tlparNode3,pscorelistNode4,trparNode5)
    nodeList.append(pscoreitemNode1)
    return nodeList, 13

def new32(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    pscoreitemNode3 = nodeArrayList2[0]
    pscoreitemsNode1 = AScoreitems(tcommaNode2,pscoreitemNode3)
    nodeList.append(pscoreitemsNode1)
    return nodeList, 14

def new33(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tintegerNode2 = nodeArrayList1[0]
    pnumberNode1 = AIntegerNumber(tintegerNode2)
    nodeList.append(pnumberNode1)
    return nodeList, 15

def new34(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tfloatNode2 = nodeArrayList1[0]
    pnumberNode1 = AFloatNumber(tfloatNode2)
    nodeList.append(pnumberNode1)
    return nodeList, 15

def new35(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pcondition2Node1 = nodeArrayList1[0]
    if (pcondition2Node1 != None):
        listNode2.append(pcondition2Node1)
    nodeList.append(listNode2)
    return nodeList, 16

def new36(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pcondition2Node2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pcondition2Node2 != None):
        listNode3.append(pcondition2Node2)
    nodeList.append(listNode3)
    return nodeList, 16

def new37(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    taminoacidNode1 = nodeArrayList1[0]
    if (taminoacidNode1 != None):
        listNode2.append(taminoacidNode1)
    nodeList.append(listNode2)
    return nodeList, 17

def new38(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    taminoacidNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (taminoacidNode2 != None):
        listNode3.append(taminoacidNode2)
    nodeList.append(listNode3)
    return nodeList, 17

def new39(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    plistitemsNode1 = nodeArrayList1[0]
    if (plistitemsNode1 != None):
        listNode2.append(plistitemsNode1)
    nodeList.append(listNode2)
    return nodeList, 18

def new40(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    plistitemsNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (plistitemsNode2 != None):
        listNode3.append(plistitemsNode2)
    nodeList.append(listNode3)
    return nodeList, 18

def new41(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pscoreitemsNode1 = nodeArrayList1[0]
    if (pscoreitemsNode1 != None):
        listNode2.append(pscoreitemsNode1)
    nodeList.append(listNode2)
    return nodeList, 19

def new42(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pscoreitemsNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pscoreitemsNode2 != None):
        listNode3.append(pscoreitemsNode2)
    nodeList.append(listNode3)
    return nodeList, 19

newnode = [
  new0,
  new1,
  new2,
  new3,
  new4,
  new5,
  new6,
  new7,
  new8,
  new9,
  new10,
  new11,
  new12,
  new13,
  new14,
  new15,
  new16,
  new17,
  new18,
  new19,
  new20,
  new21,
  new22,
  new23,
  new24,
  new25,
  new26,
  new27,
  new28,
  new29,
  new30,
  new31,
  new32,
  new33,
  new34,
  new35,
  new36,
  new37,
  new38,
  new39,
  new40,
  new41,
  new42
]

actionTable = [
                [
                  [-1, 3, 0],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [10, 0, 4],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 1],
                  [16, 0, 15],
                  [18, 0, 16],
                ],
                [
                  [-1, 3, 2],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 3],
                  [7, 0, 18],
                  [8, 0, 19],
                  [9, 0, 20],
                ],
                [
                  [-1, 3, 4],
                  [6, 0, 22],
                ],
                [
                  [-1, 3, 5],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 6],
                  [12, 0, 24],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 7],
                  [16, 0, 27],
                ],
                [
                  [-1, 3, 8],
                  [19, 2, -1],
                ],
                [
                  [-1, 1, 0],
                ],
                [
                  [-1, 1, 2],
                  [1, 0, 28],
                  [2, 0, 29],
                ],
                [
                  [-1, 1, 5],
                ],
                [
                  [-1, 1, 6],
                ],
                [
                  [-1, 1, 7],
                ],
                [
                  [-1, 1, 1],
                ],
                [
                  [-1, 3, 15],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 16],
                  [16, 0, 34],
                ],
                [
                  [-1, 1, 17],
                ],
                [
                  [-1, 3, 18],
                  [16, 0, 35],
                ],
                [
                  [-1, 3, 19],
                  [16, 0, 36],
                ],
                [
                  [-1, 3, 20],
                  [16, 0, 37],
                ],
                [
                  [-1, 1, 18],
                ],
                [
                  [-1, 3, 22],
                  [12, 0, 38],
                ],
                [
                  [-1, 3, 23],
                  [13, 0, 39],
                ],
                [
                  [-1, 3, 24],
                  [3, 0, 40],
                ],
                [
                  [-1, 1, 37],
                ],
                [
                  [-1, 1, 11],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 27],
                  [12, 0, 42],
                  [18, 0, 25],
                ],
                [
                  [-1, 1, 9],
                ],
                [
                  [-1, 1, 10],
                ],
                [
                  [-1, 1, 35],
                ],
                [
                  [-1, 3, 31],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 3],
                  [1, 0, 28],
                  [2, 0, 29],
                ],
                [
                  [-1, 1, 13],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 34],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 35],
                  [1, 0, 28],
                  [2, 0, 29],
                  [6, 0, 47],
                ],
                [
                  [-1, 3, 36],
                  [6, 0, 49],
                ],
                [
                  [-1, 3, 37],
                  [6, 0, 50],
                ],
                [
                  [-1, 3, 38],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [11, 0, 51],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 4],
                ],
                [
                  [-1, 3, 40],
                  [18, 0, 25],
                ],
                [
                  [-1, 1, 38],
                ],
                [
                  [-1, 3, 42],
                  [3, 0, 56],
                ],
                [
                  [-1, 1, 12],
                  [18, 0, 41],
                ],
                [
                  [-1, 1, 8],
                ],
                [
                  [-1, 1, 36],
                ],
                [
                  [-1, 1, 14],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 47],
                  [12, 0, 57],
                ],
                [
                  [-1, 3, 48],
                  [9, 0, 58],
                ],
                [
                  [-1, 3, 49],
                  [12, 0, 59],
                ],
                [
                  [-1, 3, 50],
                  [12, 0, 60],
                ],
                [
                  [-1, 3, 51],
                  [12, 0, 61],
                ],
                [
                  [-1, 3, 52],
                  [14, 0, 62],
                ],
                [
                  [-1, 3, 53],
                  [13, 0, 63],
                ],
                [
                  [-1, 1, 27],
                  [15, 0, 64],
                ],
                [
                  [-1, 3, 55],
                  [13, 0, 67],
                  [18, 0, 41],
                ],
                [
                  [-1, 3, 56],
                  [18, 0, 25],
                ],
                [
                  [-1, 3, 57],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 58],
                  [16, 0, 71],
                ],
                [
                  [-1, 3, 59],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 60],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 61],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [11, 0, 51],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 62],
                  [0, 0, 75],
                  [16, 0, 76],
                  [17, 0, 77],
                ],
                [
                  [-1, 1, 26],
                ],
                [
                  [-1, 3, 64],
                  [3, 0, 1],
                  [4, 0, 2],
                  [5, 0, 3],
                  [11, 0, 51],
                  [12, 0, 5],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 41],
                ],
                [
                  [-1, 1, 28],
                  [15, 0, 64],
                ],
                [
                  [-1, 1, 15],
                ],
                [
                  [-1, 3, 68],
                  [13, 0, 81],
                  [18, 0, 41],
                ],
                [
                  [-1, 1, 23],
                  [15, 0, 82],
                ],
                [
                  [-1, 3, 70],
                  [13, 0, 85],
                ],
                [
                  [-1, 3, 71],
                  [6, 0, 86],
                ],
                [
                  [-1, 3, 72],
                  [13, 0, 87],
                ],
                [
                  [-1, 3, 73],
                  [13, 0, 88],
                ],
                [
                  [-1, 3, 74],
                  [13, 0, 89],
                ],
                [
                  [-1, 3, 75],
                  [16, 0, 76],
                  [17, 0, 77],
                ],
                [
                  [-1, 1, 33],
                ],
                [
                  [-1, 1, 34],
                ],
                [
                  [-1, 1, 29],
                ],
                [
                  [-1, 1, 32],
                ],
                [
                  [-1, 1, 42],
                ],
                [
                  [-1, 1, 16],
                ],
                [
                  [-1, 3, 82],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 1, 39],
                ],
                [
                  [-1, 1, 24],
                  [15, 0, 82],
                ],
                [
                  [-1, 1, 20],
                ],
                [
                  [-1, 3, 86],
                  [12, 0, 93],
                ],
                [
                  [-1, 1, 19],
                ],
                [
                  [-1, 1, 21],
                ],
                [
                  [-1, 1, 31],
                ],
                [
                  [-1, 1, 30],
                ],
                [
                  [-1, 1, 25],
                ],
                [
                  [-1, 1, 40],
                ],
                [
                  [-1, 3, 93],
                  [3, 0, 1],
                  [16, 0, 6],
                  [18, 0, 7],
                ],
                [
                  [-1, 3, 94],
                  [13, 0, 95],
                ],
                [
                  [-1, 1, 22],
                ],
              ]

parser_gotoTable = [
                     [
                       [-1, 8],
                     ],
                     [
                       [-1, 52],
                       [0, 9],
                       [5, 23],
                     ],
                     [
                       [-1, 10],
                       [31, 44],
                     ],
                     [
                       [-1, 30],
                       [32, 45],
                     ],
                     [
                       [-1, 31],
                       [35, 48],
                     ],
                     [
                       [-1, 11],
                       [2, 17],
                       [57, 69],
                       [59, 69],
                       [60, 69],
                       [82, 91],
                       [93, 69],
                     ],
                     [
                       [-1, 12],
                     ],
                     [
                       [-1, 13],
                     ],
                     [
                       [-1, 21],
                     ],
                     [
                       [-1, 70],
                       [59, 72],
                       [60, 73],
                       [93, 94],
                     ],
                     [
                       [-1, 83],
                       [84, 92],
                     ],
                     [
                       [-1, 14],
                     ],
                     [
                       [-1, 53],
                       [61, 74],
                     ],
                     [
                       [-1, 54],
                       [64, 79],
                     ],
                     [
                       [-1, 65],
                       [66, 80],
                     ],
                     [
                       [-1, 78],
                       [75, 90],
                     ],
                     [
                       [-1, 32],
                     ],
                     [
                       [-1, 26],
                       [15, 33],
                       [27, 43],
                       [34, 46],
                       [40, 55],
                       [56, 68],
                     ],
                     [
                       [-1, 84],
                     ],
                     [
                       [-1, 66],
                     ],
                   ]
    
errorMessages = [
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'SCORE', '(', integer, amino acid",
                  "expecting: integer, amino acid",
                  "expecting: 'NOT', integer, amino acid",
                  "expecting: 'ATLEAST', 'EXACTLY', 'NOTMORETHAN'",
                  "expecting: 'FROM'",
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', '(', integer, amino acid",
                  "expecting: '(', amino acid",
                  "expecting: integer",
                  "expecting: EOF",
                  "expecting: 'AND', 'OR', ')', '=>', EOF",
                  "expecting: amino acid",
                  "expecting: '('",
                  "expecting: ')'",
                  "expecting: 'NOT'",
                  "expecting: 'AND', 'OR', ')', '=>', ',', amino acid, EOF",
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'NOTMORETHAN', '(', integer, amino acid",
                  "expecting: 'AND', 'OR', 'FROM'",
                  "expecting: 'NOT', 'EXCLUDE', 'SELECT', 'MAX', '(', integer, amino acid",
                  "expecting: 'NOTMORETHAN'",
                  "expecting: '=>'",
                  "expecting: ')', ','",
                  "expecting: ')', amino acid",
                  "expecting: '-', integer, float",
                  "expecting: 'AND', 'OR', ')', '=>', ',', EOF",
                  "expecting: integer, float",
                ]
    
errors = [
           0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9, 8, 10, 7, 9, 7, 7, 7, 9, 11, 12, 13, 14, 14, 6, 15, 15, 9, 5, 9, 14, 10, 16, 4, 4, 17, 9, 10, 14, 13, 14, 9, 9, 14, 11, 18, 11, 11, 11, 19, 12, 20, 21, 10, 2, 7, 2, 2, 17, 22, 8, 17, 20, 20, 23, 21, 20, 12, 4, 12, 12, 12, 24, 20, 20, 20, 20, 20, 23, 2, 20, 20, 9, 11, 9, 9, 20, 20, 20, 20, 2, 12, 9, 
         ]
                                   
class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        self.stack = Stack()
     
    def goTo(self, index):
        state = self.state()
        low = 1
        high = len(parser_gotoTable[index]) - 1
        value = parser_gotoTable[index][0][1]

        while (low <= high):
            middle = (low + high) / 2

            if (state < parser_gotoTable[index][middle][0]):
                high = middle - 1
            elif (state > parser_gotoTable[index][middle][0]):
                low = middle + 1
            else:
                value = parser_gotoTable[index][middle][1]
                break

        return value

    def push(self, numstate, listNode):
        self.stack.push(State(numstate, listNode))

    def state(self):
        return self.stack.peek().state

    def pop(self):
        return self.stack.pop().nodes

    def parse(self):
        self.push(0, None)
        lexer = self.lexer
        last_shift = 0
        last_pos = 0
        last_line = 0
        last_token = None
        action = [0,0]
        
        while 1:
            while (lexer.peek().TokenIndex == -1):
                lexer.next()

            token = lexer.peek()
            last_pos = token.getPos()
            last_line = token.getLine()
            last_token = token

            index = token.TokenIndex
            action[0] = actionTable[self.state()][0][1]
            action[1] = actionTable[self.state()][0][2]

            low = 1
            high = len(actionTable[self.state()]) - 1

            while (low <= high):
                middle = (low + high) / 2

                if (index < actionTable[self.state()][middle][0]):
                    high = middle - 1
                elif (index > actionTable[self.state()][middle][0]):
                    low = middle + 1
                else:
                    action[0] = actionTable[self.state()][middle][1]
                    action[1] = actionTable[self.state()][middle][2]
                    break

            if (action[0] == ACTION_SHIFT):
                nodeList = list()
                nodeList.append(lexer.next())
                self.push(action[1], nodeList)
                last_shift = action[1]
            elif (action[0] == ACTION_REDUCE):
                if (action[1] >= 0 and action[1] <= 42):
                    nodeList, leftside = newnode[action[1]](self)
                    self.push(self.goTo(leftside), nodeList)
            elif (action[0] == ACTION_ACCEPT):
                node2 = lexer.next()
                node1 = self.pop()[0]
                node = Start(node1, node2)
                return node
            elif (action[0] == ACTION_ERROR):
                raise ParserException(last_token, "[" + str(last_line) + "," + str(last_pos) + "] " + errorMessages[errors[action[1]]])
    
    def unescape (self, s):
        _out_ = StringBuffer()
      
        for i in range(len(s)):
            c = s[i]

            if (c == '\\'):
                if ((i + 1) < len(s)):
                    i += 1
                    if (s[i] == 'n'):
                        _out_.append ("\n")
                    elif (s[i] == 'r'):
                        _out_.append("\r")
                    elif (s[i] == '"'):
                        _out_.append ("\"");
                    elif (s[i] == '\\'):
                        _out_.append ("\\");
                    elif (s[i] == '0'):
                        if (s[i:].startswith("000")):
                            _out_.append("\000")
                            i += 2
                        else:
                            _out_.append ("\\")
                            _out_.append(s[i])
                    elif (s[i] == 'u'):
                        hstr = s[i+1:(i + 5)]
                    
                        if (len(hstr) == 4):
                            try:
                                _out_.append(unichr(int(hstr, 16)))
                                i += 5
                            except ValueError:
                                _out_.append("\\")
                                _out_.append(s[i])
                        else:
                            _out_.append("\\")
                            _out_.append(s[i])
                    else:
                        _out_.append("\\")
                        _out_.append(s[i])
                else:
                    _out_.append(c)
            else:
                _out_.append(c)
              
        return str(_out_)